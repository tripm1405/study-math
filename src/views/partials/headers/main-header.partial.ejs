<style>
    .k-notification {
        cursor: pointer;
    }

    .k-notification:hover {
        background-color: #ccccccff;
    }

    .k-notification .fas.fa-circle {
        font-size: small;
        color: #007bff;
        display: none;
    }

    .dropdown-menu {
        max-height: 400px;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .k-notification.k-notification-status-new .fas.fa-circle {
        display: unset !important;
    }

    .k-notification-title {
        font-weight: bold;
    }

    .k-notification-created-at {
        font-size: small;
    }

    .k-notification-more {
        color: #007bcc;
        cursor: pointer;
        text-align: center;
    }

    .k-notification-more:hover {
        color: #007bff;
        text-decoration: #007bff 1px underline solid;
    }

    .k-clone {
        display: none;
    }
</style>

<header class="header">
    <div class="header-content">
        <img src="/images/logo.png" alt="Study Math Logo" class="logo">
        <div class="search-bar">
            <form action="/search" method="GET">
                <input name="search" type="text" value="<%= search %>" class="form-control"
                       placeholder="Tìm kiếm...">
            </form>
        </div>
        <div class="ml-auto d-flex align-items-center">
            <div class="dropdown">
                <button type="button" class="btn transparent-btn" data-bs-toggle="dropdown" aria-expanded="false"
                        data-bs-auto-close="outside">
                    <i class="fas fa-bell"></i>
                </button>
                <div class="dropdown-menu p-2" style="min-width: 400px;">
                    <div class="k-notification-list ">
                    </div>
                    <div class="k-notification-more" onclick="onLoadNotification()">Xem thêm...</div>
                </div>
            </div>
            <div class="dropdown">
                <button class="btn dropdown-toggle transparent-btn" type="button" id="dropdownMenuButton"
                        data-bs-toggle="dropdown" aria-expanded="false">
                    <%= currentUser?.fullName %>
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                    <li><a class="dropdown-item" href="/profile" id="info">Thông tin cá nhân</a></li>
                    <li><a class="dropdown-item" href="/sign-out" id="logout">Đăng xuất</a></li>
                </ul>
            </div>
        </div>
    </div>
</header>

<div class="k-clone">
    <div class="k-notification p-2 rounded-2">
        <div class="d-flex justify-content-between">
            <div>
                <i class="fas fa-circle"></i>
                <span class="k-notification-title"></span>
            </div>
            <div class="k-notification-created-at"></div>
        </div>
        <div class="k-notification-content"></div>
    </div>
</div>

<script>
    const notification = {
        skip: 0,
        count: 5,
    };


    window.addEventListener('load', async () => {
        const socket = io();
        socket.on('notification', (notification) => {
            const notificationContainerNode = document.querySelector('.k-notification-list');
            notificationContainerNode.insertAdjacentElement('afterbegin', generateNotificationNode({
                ...notification,
            }));
        });

        loadNotification();
    });

    function onLoadNotification() {
        loadNotification({
            ...notification,
        });
    }

    async function loadNotification(props) {
        const {
            skip,
            count,
        } = {
            skip: 0,
            count: 5,
            ...props,
        };

        const notificationContainerNode = document.querySelector('.k-notification-list');
        const notificationRes = await axios.get('/api/notifications', {
            params: {
                skip,
                count,
            },
        });
        const notifications = notificationRes?.data?.result?.notifications || [];
        for (const notification of notifications) {
            notificationContainerNode.insertAdjacentElement('beforeend', generateNotificationNode({
                ...notification,
            }));
        }
        notification.skip = skip + count;
        if (notificationRes?.data?.result?.total <= notification.skip) {
            (e => e.style.display = 'none')(document.querySelector('.k-notification-more'));
        }
    }

    function generateNotificationNode(props) {
        const {
            status,
            content,
            createdAt,
        } = {
            ...props,
        };

        const node = document.querySelector('.k-clone .k-notification')?.cloneNode(true);
        if (status === 'New') node.classList.add('k-notification-status-new');
        node.querySelector('.k-notification-title').textContent = content?.title;
        node.querySelector('.k-notification-created-at').textContent = K.Common.datetimeFormat(createdAt);
        node.querySelector('.k-notification-content').textContent = content?.text;
        node.addEventListener('click', () => {
            window.location.href = content?.href;
        });

        return node;
    }
</script>