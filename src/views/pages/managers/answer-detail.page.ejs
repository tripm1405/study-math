<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<div class="w-full">
    <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0;">
        <h1 style="margin: 0;color: #333;">Chi tiết đáp án</h1>
        <div style="text-align: right;">
        </div>
    </div>
    <div class="row">
        <div class="h-100 col-8">
            <div id="workspace" style="height: 400px; width: 100%;"></div>
        </div>
        <div class="col-4 d-flex flex-column gap-3">
            <form onsubmit="onSubmit(event)">
                <% if (data?.answer?._id) { %>
                    <div class="form-group">
                        <label for="code">Mã:</label>
                        <input
                                id="code"
                                name="code"
                                type="text"
                                class="form-control"
                                value="<%= data?.answer?.code %>"
                                placeholder="Nhập mã..."
                                readonly
                        />
                    </div>
                <% } %>
                <div class="form-group">
                    <label for="name">Tên: <span style="color: #ff0000;">*</span></label>
                    <input
                            id="name"
                            name="name"
                            type="text"
                            class="form-control"
                            value="<%= data?.answer?.name %>"
                            placeholder="Nhập tên"
                            required
                    />
                </div>
                <div class="form-group">
                    <label for="score">Điểm: <span style="color: #ff0000;">*</span></label>
                    <input
                            id="score"
                            name="score"
                            type="number"
                            class="form-control"
                            min="0"
                            max="10"
                            value="<%= data?.answer?.score || '10' %>"
                            placeholder="Nhập điểm (0-10)"
                            required
                    />
                </div>
                <div class="form-group">
                    <label for="note">Ghi chú:</label>
                    <input id="note" name="note" type="text" class="form-control" value="<%= data?.answer?.note %>"
                           placeholder="Nhập ghi chú"/>
                </div>
                <div class="form-group text-right">
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </form>
        </div>
    </div>
</div>

<input name="id" type="hidden" value="<%= data?.answer?._id %>"/>
<input name="questionId" type="hidden" value="<%= data?.questionId %>"/>

<script>
    let isContainBlocksGlobal = false;
    let workspace;
    let toolbox;
    let blocksLocal;
    let blocksGlobal;
    let blocks;

    (async () => {
        await loadBlocks();

        workspace = K.initWorkspace({
            node: document.getElementById('workspace'),
        });

        loadToolbox();
        initWorkspace();

        async function initWorkspace() {
            const questionId = document.querySelector('input[name="questionId"]')?.value;
            const id = document.querySelector('input[name="id"]')?.value;

            if (!questionId) {
                return;
            }

            const questionRes = await axios.get(`/api/questions/${questionId}`);
            const question = questionRes?.data?.result?.question;
            const toolboxContents = question?.toolbox?.blocks?.blocks?.map(block => {
                return {
                    kind: 'block',
                    type: block.type,
                }
            }) || [];
            workspace?.updateToolbox({
                kind: 'flyoutToolbox',
                contents: toolboxContents,
            });

            if (id) {
                const answerRes = await axios.get(`/api/questions/${questionId}/answers/${id}`);
                if (!answerRes?.data?.result?.answer?.content) {
                    return;
                }

                Blockly.serialization.workspaces.load(answerRes?.data?.result?.answer?.content, workspace);
            } else {
                Blockly.serialization.workspaces.load(question?.blocksDefault, workspace);
            }
        }
    })();

    async function loadToolbox(props) {
        const {hasLoadBlocks} = {
            hasLoadBlocks: false,
            ...props,
        };

        if (hasLoadBlocks) {
            await loadBlocks();
        }

        toolbox = {
            kind: 'flyoutToolbox',
            contents: (isContainBlocksGlobal ? blocks : blocksLocal).map(block => {
                return {
                    kind: 'block',
                    type: block?.type,
                };
            }),
        };
        workspace?.updateToolbox(toolbox);
    }

    async function loadBlocks() {
        const innerBlocksLocal = await (async () => {
            const questionId = document.querySelector('input[name="questionId"]')?.value;
            if (!questionId) {
                return [];
            }

            try {
                const blocksRes = await axios.get('/api/blocks', {
                    params: {
                        questionId: questionId,
                    },
                });
                return blocksRes?.data?.result?.blocks?.map(block => K.Blockly.decode({block: block,})) || [];
            } catch (error) {
                handleApiError(error);
                return [];
            }
        })();

        const innerBlocksGlobal = await (async () => {
            try {
                const blocksRes = await axios.get('/api/blocks', {
                    params: {
                        questionId: null,
                    },
                });
                return blocksRes?.data?.result?.blocks?.map(block => K.Blockly.decode({block: block,})) || [];
            } catch (error) {
                handleApiError(error);
                return [];
            }
        })();

        blocksLocal = innerBlocksLocal;
        blocksGlobal = innerBlocksGlobal;
        blocks = [...blocksLocal, ...blocksGlobal];

        for (const block of blocks) {
            Blockly.Blocks[block.type] = {
                init: function () {
                    this.jsonInit(block);
                },
            };
        }
    }

    async function onSubmit(event) {
        event.preventDefault();

        const id = document.querySelector('input[name="id"]')?.value;
        const questionId = document.querySelector('input[name="questionId"]')?.value;
        const content = Blockly.serialization.workspaces.save?.(workspace);

        const formData = new FormData(event.target);
        K.obj2FormData(formData, content, 'content');

        try {
            const res = await (async () => {
                if (id) {
                    return await axios.put(`/api/questions/${questionId}/answers/${id}`, formData);
                } else {
                    return await axios.post(`/api/questions/${questionId}/answers`, formData);
                }
            })();

            if (!res?.data?.success) {
                K.Toast.showError({res: res});
                return;
            }

            window.location.href = `/questions/${questionId}/answers`;
        } catch (err) {
            K.Toast.showServerError();
        }
    }
</script>