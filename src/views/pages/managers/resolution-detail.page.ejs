<style>
  input[type="text"], input[type="number"], select {
    width: 35%;
    padding: 10px;
    box-sizing: border-box;
  }
  .review-workspace {
    height: 100%;
    width: 100%;
  }
  .button-section {
    display: flex;
    align-items:flex-start;
    gap: 10px;
    padding: 10px;
  }
  .button-section button {
    padding: 10px 20px;
    background-color: #ffffff;
    color: #4CAF50;
    border: 2px solid #ceffd0;        
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    align-items:flex-end;
  }
  .button-section button:hover {
    background-color: #45a049;
    color: #ffffff;
  }
</style>

<div class="w-100 row">
  <div class="h-100 col-8 border" style="position: relative;">
    <div style="height: 100%; width: 100%;">
      <div class="w-full">
        <div id="review-workspace" class="review-workspace"></div>
      </div>
    </div>
  </div>
  <div class="col-4 d-flex button-section">
    <input name="score" type="number" min="0" max="10" value="10" />
    <button onclick="submit()">CHẤM ĐIỂM</button>
  </div>
</div>

<input name="id" type="hidden" value="<%= data?.resolution?._id %>" />
<input name="questionId" type="hidden" value="<%= data?.resolution?.question %>" />

<script>
  let solveWorkspace;

  // init
  (async () => {
    const id = document.querySelector('input[name="id"]')?.value;
    const questionId = document.querySelector('input[name="questionId"]')?.value;

    await K.loadBlocks({
      params: {
        all: true,
      },
    });

    const questionRes = await axios.get(`/api/questions/${questionId}`);
    const question = questionRes?.data?.result?.question;
    const toolboxContents = question?.toolbox?.blocks?.blocks?.map(block => {
      return {
        kind: 'block',
        type: block.type,
      }
    }) || [];

    solveWorkspace = K.initWorkspace({
      node: document.getElementById('review-workspace'),
      options: {
        toolbox: {
          contents: toolboxContents,
        },
        readOnly: true,
      },
    });

    const resolution = await (async () => {
      const res = await axios.get(`/api/resolutions/${id}`);
      return res?.data?.result?.resolution;
    })();

    Blockly.serialization.workspaces.load(resolution?.content, solveWorkspace);
  })();

  async function submit() {
    const id = document.querySelector('input[name="id"]')?.value;
    const score = document.querySelector('input[name="score"]')?.value;
    const formData = new FormData();
    formData.set('score', score);
    await axios.put(`/api/resolutions/${id}/mark`, formData);

    window.location.href = `/resolutions`;
  }

  async function initBlocks() {
    const blocksRes = await axios.get('/api/blocks', {
      params: {
        all: true,
      },
    });
    return blocksRes?.data?.result?.blocks || [];
  }
</script>